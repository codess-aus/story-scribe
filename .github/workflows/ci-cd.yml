# GitHub Actions workflow for CI/CD pipeline
# This workflow handles testing, security scanning, and deployment to Azure

name: StoryScribe CI/CD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

permissions:
  id-token: write
  contents: read
  security-events: write

env:
  NODE_VERSION: '20'
  PYTHON_VERSION: '3.12'
  AZURE_WEBAPP_NAME: story-scribe-app
  AZURE_FUNCTIONS_NAME: story-scribe-functions

jobs:
  test:
    name: Test Application
    runs-on: ubuntu-latest
    environment: production
    
    env:
      AZURE_OPENAI_ENDPOINT: ${{ secrets.AZURE_OPENAI_ENDPOINT }}
      OPENAI_DEPLOYMENT: gpt-4o-mini
      OPENAI_API_VERSION: 2024-08-01-preview
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'frontend/package-lock.json'

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
          cache-dependency-path: 'backend/requirements.txt'

      - name: Install frontend dependencies
        working-directory: ./frontend
        run: npm ci

      - name: Install backend dependencies
        working-directory: ./backend
        run: pip install -r requirements.txt

      - name: Run frontend tests
        working-directory: ./frontend
        run: npm test
        continue-on-error: true

      - name: Run frontend linting
        working-directory: ./frontend
        run: npm run lint
        continue-on-error: true

      - name: Azure Login (Federated Credentials)
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Configure RBAC for OpenAI
        uses: azure/cli@v2
        with:
          inlineScript: |
            # Get the Object ID of the GitHub Actions Service Principal
            SP_OBJECT_ID=$(az ad sp show --id ${{ secrets.AZURE_CLIENT_ID }} --query id -o tsv)
            
            # Assign the Cognitive Services OpenAI User role (idempotent)
            az role assignment create \
              --assignee-object-id "$SP_OBJECT_ID" \
              --role "Cognitive Services OpenAI User" \
              --scope "/subscriptions/${{ secrets.AZURE_SUBSCRIPTION_ID }}/resourceGroups/${{ secrets.AZURE_RESOURCE_GROUP }}/providers/Microsoft.CognitiveServices/accounts/${{ secrets.AZURE_OPENAI_NAME }}" \
              2>/dev/null || echo "Role assignment already exists"

      - name: Run backend tests
        working-directory: ./backend
        run: pytest test_openai.py -v

      - name: Run backend linting
        working-directory: ./backend
        run: flake8 .
        continue-on-error: true

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Run dependency vulnerability scan
        uses: snyk/actions/node@master
        with:
          args: --all-projects
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        continue-on-error: true

      - name: Run code security scan
        uses: github/codeql-action/init@v3
        with:
          languages: javascript, python

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        continue-on-error: true

  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: [test, security-scan]
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'frontend/package-lock.json'

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
          cache-dependency-path: 'backend/requirements.txt'

      - name: Install frontend dependencies
        working-directory: ./frontend
        run: npm ci

      - name: Build frontend
        working-directory: ./frontend
        run: npm run build

      - name: Install backend dependencies
        working-directory: ./backend
        run: |
          pip install --upgrade pip
          pip install -r requirements.txt

      - name: Upload frontend build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build
          path: frontend/dist

      - name: Upload backend artifacts
        uses: actions/upload-artifact@v4
        with:
          name: backend-files
          path: |
            backend/
            !backend/.venv/
            !backend/__pycache__/
            !backend/.pytest_cache/

  deploy:
    name: Deploy to Azure
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main' && (github.event_name == 'push' || github.event_name == 'workflow_dispatch')
    environment: production
    
    steps:
      - name: Download frontend build artifacts
        uses: actions/download-artifact@v4
        with:
          name: frontend-build
          path: frontend/dist

      - name: Download backend artifacts
        uses: actions/download-artifact@v4
        with:
          name: backend-files
          path: backend

      - name: Azure Login (Federated Credentials)
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Deploy frontend to Azure Web App
        uses: azure/webapps-deploy@v3
        with:
          app-name: ${{ env.AZURE_WEBAPP_NAME }}
          package: frontend/dist

      - name: Deploy backend to Azure Functions
        uses: azure/functions-action@v1
        with:
          app-name: ${{ env.AZURE_FUNCTIONS_NAME }}
          package: backend

      - name: Configure Azure Function App Settings
        uses: azure/cli@v2
        with:
          inlineScript: |
            # Set application settings for the function app
            az functionapp config appsettings set --name ${{ env.AZURE_FUNCTIONS_NAME }} \
              --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} \
              --settings \
                CONTENT_SAFETY_ENDPOINT=${{ secrets.CONTENT_SAFETY_ENDPOINT }} \
                AZURE_OPENAI_ENDPOINT=${{ secrets.AZURE_OPENAI_ENDPOINT }} \
                OPENAI_DEPLOYMENT=gpt-4o-mini \
                OPENAI_API_VERSION=2024-08-01-preview \
                WEBSITE_RUN_FROM_PACKAGE=1

      - name: Log deployment status
        run: |
          echo "âœ… Deployment completed successfully at $(date)"
          echo "Frontend: https://${{ env.AZURE_WEBAPP_NAME }}.azurewebsites.net"
          echo "Backend: https://${{ env.AZURE_FUNCTIONS_NAME }}.azurewebsites.net"
